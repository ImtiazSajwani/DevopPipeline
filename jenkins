pipeline {
    agent any
    
    environment {
        // Project configuration
        PROJECT_NAME = 'todo-devops-demo'
        DOCKER_IMAGE = 'todo-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        NODE_VERSION = '18'
        
        // Deployment configuration
        STAGING_PORT = '3001'
        PROD_PORT = '3000'
        
        // Quality gates
        COVERAGE_THRESHOLD = '70'
        SECURITY_THRESHOLD = 'moderate'
    }
    
    tools {
        nodejs "${NODE_VERSION}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "🚀 Starting Todo DevOps Pipeline - Build #${BUILD_NUMBER}"
                    
                    // Clean workspace and checkout code
                    deleteDir()
                    checkout scm
                    
                    // Display project information
                    sh '''
                        echo "📋 Project Structure:"
                        ls -la
                        
                        echo "📦 Package.json contents:"
                        if [ -f package.json ]; then
                            cat package.json | jq '.name, .version, .scripts' || cat package.json
                        else
                            echo "❌ package.json not found"
                        fi
                        
                        echo "🔍 Node.js and npm versions:"
                        node --version
                        npm --version
                    '''
                }
            }
            post {
                success {
                    echo '✅ Checkout completed successfully'
                }
                failure {
                    echo '❌ Checkout failed'
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    echo '🔨 Building application...'
                    
                    sh '''
                        echo "Installing dependencies..."
                        npm ci --only=production
                        
                        echo "Installing dev dependencies for build..."
                        npm install
                        
                        echo "Running build script..."
                        npm run build || echo "No build script configured"
                        
                        echo "Checking application files..."
                        ls -la
                        
                        # Verify critical files exist
                        if [ ! -f "server.js" ]; then
                            echo "❌ server.js not found"
                            exit 1
                        fi
                        
                        if [ ! -f "package.json" ]; then
                            echo "❌ package.json not found"
                            exit 1
                        fi
                        
                        echo "✅ Build preparation completed"
                    '''
                    
                    // Build Docker image
                    sh '''
                        echo "🐳 Building Docker image..."
                        
                        # Create Dockerfile if it doesn't exist
                        if [ ! -f "Dockerfile" ]; then
                            echo "Creating Dockerfile..."
                            cat > Dockerfile << 'EOF'
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy application code
COPY . .

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nodeuser -u 1001

# Change ownership
RUN chown -R nodeuser:nodejs /app
USER nodeuser

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\
    CMD node -e "const http = require('http'); const options = { host: 'localhost', port: 3000, path: '/health', timeout: 2000 }; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => { process.exit(1); }); req.end();"

# Start application
CMD ["npm", "start"]
EOF
                        fi
                        
                        # Build Docker image
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                        
                        echo "✅ Docker image built successfully"
                        docker images | grep ${DOCKER_IMAGE}
                    '''
                }
            }
            post {
                success {
                    echo '✅ Build completed successfully'
                }
                failure {
                    echo '❌ Build failed'
                    sh 'docker images | grep ${DOCKER_IMAGE} || echo "No Docker images found"'
                }
            }
        }
        
        stage('Test') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        script {
                            echo '🧪 Running unit tests...'
                            
                            sh '''
                                echo "Executing Jest unit tests..."
                                npm test -- --ci --coverage --testResultsProcessor=jest-junit
                                
                                echo "Test results:"
                                if [ -f "coverage/lcov-report/index.html" ]; then
                                    echo "✅ Coverage report generated"
                                fi
                                
                                # Check coverage threshold
                                COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct' 2>/dev/null || echo "0")
                                echo "Code coverage: ${COVERAGE}%"
                                
                                if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l 2>/dev/null || echo "1") )); then
                                    echo "⚠️ Coverage below threshold (${COVERAGE_THRESHOLD}%)"
                                else
                                    echo "✅ Coverage meets threshold"
                                fi
                            '''
                        }
                    }
                    post {
                        always {
                            // Publish test results
                            publishTestResults testResultsPattern: 'junit.xml', allowEmptyResults: true
                            
                            // Publish coverage report
                            publishCoverage adapters: [
                                istanbulCoberturaAdapter('coverage/cobertura-coverage.xml')
                            ], sourceFileResolver: sourceFiles('STORE_ALL_BUILD')
                        }
                    }
                }
                
                stage('Integration Tests') {
                    steps {
                        script {
                            echo '🔗 Running integration tests...'
                            
                            sh '''
                                echo "Starting application for integration tests..."
                                
                                # Start application in background
                                npm start &
                                APP_PID=$!
                                
                                # Wait for application to start
                                echo "Waiting for application to start..."
                                for i in {1..30}; do
                                    if curl -f http://localhost:3000/health 2>/dev/null; then
                                        echo "✅ Application started successfully"
                                        break
                                    fi
                                    echo "Waiting... ($i/30)"
                                    sleep 2
                                done
                                
                                # Run API tests
                                echo "Running API integration tests..."
                                npm run test:integration || echo "Integration tests completed with warnings"
                                
                                # Test API endpoints
                                echo "Testing API endpoints..."
                                
                                # Health check
                                curl -f http://localhost:3000/health || echo "Health check failed"
                                
                                # Get todos
                                curl -f http://localhost:3000/api/todos || echo "Get todos failed"
                                
                                # Create todo
                                curl -X POST http://localhost:3000/api/todos \\
                                     -H "Content-Type: application/json" \\
                                     -d '{"text":"Integration test todo"}' || echo "Create todo failed"
                                
                                # Stop application
                                kill $APP_PID 2>/dev/null || echo "Application already stopped"
                                wait $APP_PID 2>/dev/null || echo "Application process cleaned up"
                                
                                echo "✅ Integration tests completed"
                            '''
                        }
                    }
                }
                
                stage('Performance Tests') {
                    steps {
                        script {
                            echo '⚡ Running performance tests...'
                            
                            sh '''
                                echo "Starting performance tests..."
                                
                                # Start application
                                npm start &
                                APP_PID=$!
                                
                                # Wait for startup
                                sleep 10
                                
                                # Simple load test with curl
                                echo "Running load test..."
                                for i in {1..50}; do
                                    curl -s http://localhost:3000/health > /dev/null &
                                done
                                wait
                                
                                # Response time test
                                echo "Testing response times..."
                                RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null http://localhost:3000/health)
                                echo "Response time: ${RESPONSE_TIME}s"
                                
                                # Memory usage test
                                MEMORY_USAGE=$(ps -o pid,vsz,rss,comm -p $APP_PID | tail -1 | awk '{print $3}')
                                echo "Memory usage: ${MEMORY_USAGE}KB"
                                
                                # Create performance report
                                cat > performance-report.txt << EOF
Performance Test Results:
- Response Time: ${RESPONSE_TIME}s
- Memory Usage: ${MEMORY_USAGE}KB
- Load Test: 50 concurrent requests completed
- Test Status: $([ $(echo "$RESPONSE_TIME < 1.0" | bc -l 2>/dev/null || echo "0") -eq 1 ] && echo "PASS" || echo "WARN")
EOF
                                
                                # Stop application
                                kill $APP_PID 2>/dev/null || echo "Application stopped"
                                wait $APP_PID 2>/dev/null || echo "Cleanup completed"
                                
                                echo "✅ Performance tests completed"
                                cat performance-report.txt
                            '''
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'performance-report.txt', allowEmptyArchive: true
                        }
                    }
                }
            }
        }
        
        stage('Code Quality') {
            steps {
                script {
                    echo '📊 Running code quality analysis...'
                    
                    sh '''
                        echo "Running ESLint..."
                        
                        # Create .eslintrc.json if it doesn't exist
                        if [ ! -f ".eslintrc.json" ]; then
                            cat > .eslintrc.json << 'EOF'
{
  "env": {
    "node": true,
    "es2021": true,
    "jest": true
  },
  "extends": ["standard"],
  "parserOptions": {
    "ecmaVersion": 12,
    "sourceType": "module"
  },
  "rules": {
    "no-console": "warn",
    "no-unused-vars": "error",
    "no-undef": "error"
  }
}
EOF
                        fi
                        
                        # Run ESLint
                        npx eslint . --ext .js --format json --output-file eslint-report.json || echo "ESLint completed with issues"
                        npx eslint . --ext .js --format unix || echo "ESLint completed"
                        
                        # Code complexity check
                        echo "Analyzing code complexity..."
                        find . -name "*.js" -not -path "./node_modules/*" -not -path "./coverage/*" | while read file; do
                            lines=$(wc -l < "$file")
                            echo "File: $file - Lines: $lines"
                        done > complexity-report.txt
                        
                        # SonarQube analysis (if available)
                        if command -v sonar-scanner &> /dev/null; then
                            echo "Running SonarQube analysis..."
                            
                            # Create sonar-project.properties if it doesn't exist
                            if [ ! -f "sonar-project.properties" ]; then
                                cat > sonar-project.properties << EOF
sonar.projectKey=${PROJECT_NAME}
sonar.projectName=Todo DevOps Demo
sonar.projectVersion=${BUILD_NUMBER}
sonar.sources=.
sonar.exclusions=node_modules/**,coverage/**,tests/**
sonar.tests=tests
sonar.language=js
sonar.javascript.lcov.reportPaths=coverage/lcov.info
EOF
                            fi
                            
                            sonar-scanner || echo "SonarQube analysis completed with warnings"
                        else
                            echo "SonarQube scanner not available, skipping detailed analysis"
                        fi
                        
                        echo "✅ Code quality analysis completed"
                    '''
                }
            }
            post {
                always {
                    // Archive code quality reports
                    archiveArtifacts artifacts: 'eslint-report.json,complexity-report.txt', allowEmptyArchive: true
                    
                    // Publish ESLint results
                    script {
                        if (fileExists('eslint-report.json')) {
                            recordIssues enabledForFailure: true, tools: [esLint(pattern: 'eslint-report.json')]
                        }
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    echo '🔒 Running security analysis...'
                    
                    sh '''
                        echo "Running npm audit..."
                        mkdir -p security-reports
                        
                        # npm audit
                        npm audit --audit-level=${SECURITY_THRESHOLD} --json > security-reports/npm-audit.json || true
                        npm audit --audit-level=${SECURITY_THRESHOLD} || echo "npm audit completed with warnings"
                        
                        # Snyk security scan (if available)
                        if command -v snyk &> /dev/null; then
                            echo "Running Snyk security scan..."
                            snyk auth $SNYK_TOKEN || echo "Snyk auth failed, using free tier"
                            snyk test --json > security-reports/snyk-report.json || true
                            snyk test || echo "Snyk scan completed with findings"
                        else
                            echo "Snyk not available, using npm audit only"
                        fi
                        
                        # Docker image security scan
                        echo "Scanning Docker image for vulnerabilities..."
                        
                        # Basic Docker security check
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\
                            -v $(pwd):/app -w /app \\
                            alpine/helm:latest sh -c "
                                echo 'Docker image layers:' > security-reports/docker-scan.txt
                                docker history ${DOCKER_IMAGE}:${DOCKER_TAG} >> security-reports/docker-scan.txt 2>&1 || echo 'Docker scan completed'
                            " || echo "Docker security scan completed"
                        
                        # Check for hardcoded secrets
                        echo "Checking for potential secrets..."
                        grep -r -i -E "(password|secret|key|token|api_key)" \\
                            --include="*.js" --include="*.json" \\
                            --exclude-dir=node_modules \\
                            --exclude-dir=coverage . > security-reports/secrets-check.txt || echo "No obvious secrets found"
                        
                        # Security summary
                        echo "=== Security Scan Summary ===" > security-reports/summary.txt
                        echo "Scan Date: $(date)" >> security-reports/summary.txt
                        
                        # Count npm audit issues
                        if [ -f "security-reports/npm-audit.json" ]; then
                            AUDIT_ISSUES=$(cat security-reports/npm-audit.json | jq -r '.vulnerabilities | length' 2>/dev/null || echo "0")
                            echo "NPM Audit Issues: $AUDIT_ISSUES" >> security-reports/summary.txt
                        fi
                        
                        # Check if secrets were found
                        if [ -s "security-reports/secrets-check.txt" ]; then
                            echo "⚠️ Potential secrets detected!" >> security-reports/summary.txt
                            echo "SECRETS_FOUND=true" >> security-reports/summary.txt
                        else
                            echo "✅ No obvious secrets found" >> security-reports/summary.txt
                            echo "SECRETS_FOUND=false" >> security-reports/summary.txt
                        fi
                        
                        echo "✅ Security analysis completed"
                        cat security-reports/summary.txt
                    '''
                }
            }
            post {
                always {
                    // Archive security reports
                    archiveArtifacts artifacts: 'security-reports/**/*', allowEmptyArchive: true
                    
                    // Check for critical security issues
                    script {
                        if (fileExists('security-reports/summary.txt')) {
                            def summary = readFile('security-reports/summary.txt')
                            echo "Security Summary:\\n${summary}"
                            
                            if (summary.contains('SECRETS_FOUND=true')) {
                                currentBuild.result = 'UNSTABLE'
                                echo "⚠️ Potential secrets detected - marking build as unstable"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                script {
                    echo '🚀 Deploying to staging environment...'
                    
                    sh '''
                        echo "Setting up staging deployment..."
                        
                        # Create staging docker-compose file
                        cat > docker-compose.staging.yml << 'EOF'
version: '3.8'
services:
  todo-app-staging:
    image: ${DOCKER_IMAGE}:${DOCKER_TAG}
    container_name: todo-staging
    ports:
      - "${STAGING_PORT}:3000"
    environment:
      - NODE_ENV=staging
      - PORT=3000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
EOF
                        
                        # Stop existing staging containers
                        docker-compose -f docker-compose.staging.yml down || true
                        docker container prune -f || true
                        
                        # Deploy to staging
                        export DOCKER_IMAGE=${DOCKER_IMAGE}
                        export DOCKER_TAG=${DOCKER_TAG}
                        export STAGING_PORT=${STAGING_PORT}
                        
                        docker-compose -f docker-compose.staging.yml up -d
                        
                        # Wait for application to start
                        echo "Waiting for staging application to start..."
                        sleep 30
                        
                        # Health check with retries
                        HEALTH_CHECK_PASSED=false
                        for i in {1..10}; do
                            echo "Health check attempt $i/10..."
                            if curl -f http://localhost:${STAGING_PORT}/health; then
                                echo "✅ Staging health check passed"
                                HEALTH_CHECK_PASSED=true
                                break
                            fi
                            sleep 10
                        done
                        
                        if [ "$HEALTH_CHECK_PASSED" = "false" ]; then
                            echo "❌ Staging deployment health check failed"
                            docker-compose -f docker-compose.staging.yml logs
                            exit 1
                        fi
                        
                        # Test basic functionality
                        echo "Testing staging deployment..."
                        
                        # Test API endpoints
                        curl -f http://localhost:${STAGING_PORT}/api/todos || echo "API test warning"
                        
                        # Test frontend
                        curl -f http://localhost:${STAGING_PORT}/ || echo "Frontend test warning"
                        
                        # Test metrics endpoint
                        curl -f http://localhost:${STAGING_PORT}/metrics || echo "Metrics test warning"
                        
                        echo "✅ Staging deployment successful"
                        
                        # Display deployment info
                        echo "Staging deployment information:"
                        echo "URL: http://localhost:${STAGING_PORT}"
                        echo "Container: $(docker ps | grep todo-staging | awk '{print $1}')"
                        echo "Status: $(docker ps --format 'table {{.Names}}\\t{{.Status}}' | grep todo-staging)"
                    '''
                }
            }
            post {
                success {
                    echo '✅ Staging deployment completed successfully'
                }
                failure {
                    echo '❌ Staging deployment failed'
                    sh '''
                        echo "Staging deployment failure details:"
                        docker-compose -f docker-compose.staging.yml logs --tail 50
                        docker ps -a | grep todo-staging
                    '''
                }
            }
        }
        
        stage('Release to Production') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                script {
                    echo '🏭 Deploying to production environment...'
                    
                    // Prompt for production deployment approval
                    timeout(time: 5, unit: 'MINUTES') {
                        input message: 'Deploy to production?', ok: 'Deploy',
                              submitterParameter: 'DEPLOYER_NAME'
                    }
                    
                    sh '''
                        echo "Production deployment approved by: ${DEPLOYER_NAME:-Unknown}"
                        echo "Setting up production deployment..."
                        
                        # Create production docker-compose file
                        cat > docker-compose.prod.yml << 'EOF'
version: '3.8'
services:
  todo-app-prod:
    image: ${DOCKER_IMAGE}:${DOCKER_TAG}
    container_name: todo-production
    ports:
      - "${PROD_PORT}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  nginx:
    image: nginx:alpine
    container_name: todo-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - todo-app-prod
    restart: always
EOF
                        
                        # Create nginx configuration
                        cat > nginx.conf << 'EOF'
events {
    worker_connections 1024;
}

http {
    upstream app {
        server todo-app-prod:3000;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        location / {
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /health {
            access_log off;
            proxy_pass http://app/health;
        }
    }
}
EOF
                        
                        # Blue-green deployment
                        echo "Implementing blue-green deployment..."
                        
                        # Backup current production if exists
                        if docker ps | grep -q todo-production; then
                            echo "Backing up current production..."
                            docker tag ${DOCKER_IMAGE}:latest ${DOCKER_IMAGE}:backup-$(date +%Y%m%d-%H%M%S)
                            
                            # Graceful shutdown
                            docker-compose -f docker-compose.prod.yml down --timeout 30 || true
                        fi
                        
                        # Deploy new version
                        export DOCKER_IMAGE=${DOCKER_IMAGE}
                        export DOCKER_TAG=${DOCKER_TAG}
                        export PROD_PORT=${PROD_PORT}
                        
                        docker-compose -f docker-compose.prod.yml up -d
                        
                        # Wait for production deployment
                        echo "Waiting for production deployment..."
                        sleep 60
                        
                        # Comprehensive production health checks
                        PRODUCTION_HEALTHY=false
                        for i in {1..15}; do
                            echo "Production health check $i/15..."
                            
                            # Container health
                            if docker exec todo-production curl -f http://localhost:3000/health 2>/dev/null; then
                                echo "✅ Container health check passed"
                                
                                # External health check
                                if curl -f http://localhost:${PROD_PORT}/health 2>/dev/null; then
                                    echo "✅ External health check passed"
                                    
                                    # Load balancer health check
                                    if curl -f http://localhost/health 2>/dev/null; then
                                        echo "✅ Load balancer health check passed"
                                        PRODUCTION_HEALTHY=true
                                        break
                                    fi
                                fi
                            fi
                            
                            sleep 20
                        done
                        
                        if [ "$PRODUCTION_HEALTHY" = "true" ]; then
                            echo "✅ Production deployment successful"
                            
                            # Tag successful release
                            git tag -a "v${BUILD_NUMBER}" -m "Production release ${BUILD_NUMBER}" || true
                            
                            # Clean up old images (keep last 3)
                            docker images ${DOCKER_IMAGE} --format "{{.Tag}}" | grep -v latest | grep -v backup | tail -n +4 | xargs -r -I {} docker rmi ${DOCKER_IMAGE}:{} || true
                            
                        else
                            echo "❌ Production deployment failed health checks"
                            
                            # Rollback if backup exists
                            BACKUP_IMAGE=$(docker images ${DOCKER_IMAGE} --format "{{.Tag}}" | grep backup | head -1)
                            if [ ! -z "$BACKUP_IMAGE" ]; then
                                echo "🔄 Rolling back to backup: $BACKUP_IMAGE"
                                docker tag ${DOCKER_IMAGE}:$BACKUP_IMAGE ${DOCKER_IMAGE}:latest
                                docker-compose -f docker-compose.prod.yml up -d --force-recreate
                            fi
                            
                            exit 1
                        fi
                        
                        # Production smoke tests
                        echo "Running production smoke tests..."
                        
                        # Test all critical endpoints
                        curl -f http://localhost/health || echo "Health endpoint test failed"
                        curl -f http://localhost/api/todos || echo "API endpoint test failed"
                        curl -f http://localhost/ || echo "Frontend test failed"
                        
                        echo "✅ Production deployment and testing completed"
                    '''
                }
            }
            post {
                success {
                    echo '✅ Production deployment completed successfully'
                    
                    script {
                        // Create deployment summary
                        sh '''
                            cat > production-deployment.txt << EOF
Production Deployment Summary:
- Build Number: ${BUILD_NUMBER}
- Docker Image: ${DOCKER_IMAGE}:${DOCKER_TAG}
- Deployed by: ${DEPLOYER_NAME:-Jenkins}
- Deployment Time: $(date)
- Production URL: http://localhost:${PROD_PORT}
- Load Balancer URL: http://localhost
- Status: Successful
EOF
                        '''
                        
                        archiveArtifacts artifacts: 'production-deployment.txt'
                    }
                }
                failure {
                    echo '❌ Production deployment failed'
                    sh '''
                        echo "Production deployment failure details:"
                        docker-compose -f docker-compose.prod.yml logs --tail 50
                        docker ps -a | grep todo
                    '''
                }
            }
        }
        
        stage('Monitoring & Alerting') {
            steps {
                script {
                    echo '📊 Setting up monitoring and alerting...'
                    
                    sh '''
                        echo "Configuring monitoring stack..."
                        mkdir -p monitoring/{prometheus,grafana,logs}
                        
                        # Create Prometheus configuration
                        cat > monitoring/prometheus.yml << 'EOF'
global:
  scrape_interval: 15s
  evaluation_interval: 15s

scrape_configs:
  - job_name: 'todo-app'
    static_configs:
      - targets: ['todo-production:3000']
    metrics_path: '/metrics'
    scrape_interval: 10s
    
  - job_name: 'todo-app-staging'
    static_configs:
      - targets: ['todo-staging:3000']
    metrics_path: '/metrics'
    scrape_interval: 30s
EOF
                        
                        # Create monitoring docker-compose
                        cat > monitoring/docker-compose.monitoring.yml << 'EOF'
version: '3.8'
services:
  prometheus:
    image: prom/prometheus:latest
    container_name: todo-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    
  grafana:
    image: grafana/grafana:latest
    container_name: todo-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    restart: unless-stopped
    
  node-exporter:
    image: prom/node-exporter:latest
    container_name: todo-node-exporter
    ports:
      - "9100:9100"
    restart: unless-stopped
EOF
                        
                        # Start monitoring stack
                        cd monitoring
                        docker-compose -f docker-compose.monitoring.yml up -d
                        
                        # Wait for services
                        sleep 30
                        
                        # Verify monitoring services
                        echo "Verifying monitoring services..."
                        
                        if curl -f http://localhost:9090/-/healthy 2>/dev/null; then
                            echo "✅ Prometheus is healthy"
                        else
                            echo "❌ Prometheus health check failed"
                        fi
                        
                        if curl -f http://localhost:3001/api/health 2>/dev/null; then
                            echo "✅ Grafana is healthy"
                        else
                            echo "❌ Grafana health check failed"
                        fi
                        
                        cd ..
                        
                        # Create monitoring script
                        cat > monitor-app.sh << 'EOF'
#!/bin/bash
# Application monitoring script

LOG_FILE="monitoring/application-monitor.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

echo "[$TIMESTAMP] Starting application monitoring..." >> $LOG_FILE

# Check production health
PROD_HEALTH=$(curl -s http://localhost:${PROD_PORT}/health | jq -r '.status' 2>/dev/null || echo "unhealthy")
echo "[$TIMESTAMP] Production health: $PROD_HEALTH" >> $LOG_FILE

# Check staging health
STAGING_HEALTH=$(curl -s http://localhost:${STAGING_PORT}/health | jq -r '.status' 2>/dev/null || echo "unhealthy")
echo "[$TIMESTAMP] Staging health: $STAGING_HEALTH" >> $LOG_FILE

# Check container status
PROD_STATUS=$(docker ps --filter "name=todo-production" --format "{{.Status}}" | head -1)
STAGING_STATUS=$(docker ps --filter "name=todo-staging" --format "{{.Status}}" | head -1)

echo "[$TIMESTAMP] Production container: $PROD_STATUS" >> $LOG_FILE
echo "[$TIMESTAMP] Staging container: $STAGING_STATUS" >> $LOG_FILE

# Alert on issues
if [ "$PROD_HEALTH" != "healthy" ]; then
    echo "[$TIMESTAMP] ALERT: Production application unhealthy!" >> $LOG_FILE
fi

if [ "$STAGING_HEALTH" != "healthy" ]; then
    echo "[$TIMESTAMP] ALERT: Staging application unhealthy!" >> $LOG_FILE
fi

echo "[$TIMESTAMP] Monitoring check completed" >> $LOG_FILE
EOF
                        chmod +x monitor-app.sh
                        
                        # Run initial monitoring check
                        ./monitor-app.sh
                        
                        # Setup monitoring cron job
                        (crontab -l 2>/dev/null; echo "*/5 * * * * $(pwd)/monitor-app.sh") | crontab - || true
                        
                        # Create monitoring summary
                        cat > monitoring-setup.txt << 'EOF'
Monitoring Setup Complete:

Services:
- Prometheus: http://localhost:9090
- Grafana: http://localhost:3001 (admin/admin123)
- Node Exporter: http://localhost:9100

Application Metrics:
- Production: http://localhost:${PROD_PORT}/metrics
- Staging: http://localhost:${STAGING_PORT}/metrics

Monitoring Script: monitor-app.sh (runs every 5 minutes)
Log File: monitoring/application-monitor.log

Dashboard Access:
- Production App: http://localhost:${PROD_PORT}
- Staging App: http://localhost:${STAGING_PORT}
- Load Balancer: http://localhost
EOF
                        
                        echo "✅ Monitoring and alerting setup completed"
                        cat monitoring-setup.txt
                    '''
                }
            }
            post {
                always {
                    // Archive monitoring configuration
                    archiveArtifacts artifacts: 'monitoring/**/*,monitoring-setup.txt', allowEmptyArchive: true
                }
                success {
                    echo '✅ Monitoring setup completed successfully'
                }
                failure {
                    echo '❌ Monitoring setup failed'
                    sh 'cd monitoring && docker-compose -f docker-compose.monitoring.yml logs'
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo '🏁 Todo DevOps Pipeline completed'
                
                // Create comprehensive final report
                sh '''
                    echo "=== Todo DevOps Pipeline Final Report ===" > final-report.txt
                    echo "Build: ${BUILD_NUMBER}" >> final-report.txt
                    echo "Timestamp: $(date)" >> final-report.txt
                    echo "Branch: ${BRANCH_NAME:-main}" >> final-report.txt
                    echo "" >> final-report.txt
                    
                    echo "Deployment Status:" >> final-report.txt
                    echo "- Production: $(docker ps --filter 'name=todo-production' --format '{{.Status}}' | head -1 || echo 'Not running')" >> final-report.txt
                    echo "- Staging: $(docker ps --filter 'name=todo-staging' --format '{{.Status}}' | head -1 || echo 'Not running')" >> final-report.txt
                    echo "" >> final-report.txt
                    
                    echo "Access URLs:" >> final-report.txt
                    echo "- Production: http://localhost:${PROD_PORT}" >> final-report.txt
                    echo "- Staging: http://localhost:${STAGING_PORT}" >> final-report.txt
                    echo "- Load Balancer: http://localhost" >> final-report.txt
                    echo "- Prometheus: http://localhost:9090" >> final-report.txt
                    echo "- Grafana: http://localhost:3001" >> final-report.txt
                    echo "" >> final-report.txt
                    
                    echo "Pipeline Stages Completed:" >> final-report.txt
                    echo "✅ 1. Checkout" >> final-report.txt
                    echo "✅ 2. Build" >> final-report.txt
                    echo "✅ 3. Test (Unit, Integration, Performance)" >> final-report.txt
                    echo "✅ 4. Code Quality" >> final-report.txt
                    echo "✅ 5. Security Scan" >> final-report.txt
                    echo "✅ 6. Deploy to Staging" >> final-report.txt
                    echo "✅ 7. Release to Production" >> final-report.txt
                    echo "✅ 8. Monitoring & Alerting" >> final-report.txt
                '''
                
                // Archive final report
                archiveArtifacts artifacts: 'final-report.txt'
                
                // Clean up workspace
                cleanWs(
                    cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true
                )
            }
        }
        
        success {
            script {
                echo '🎉 Todo DevOps Pipeline completed successfully!'
                
                if (fileExists('final-report.txt')) {
                    def report = readFile('final-report.txt')
                    echo "\\n${report}"
                }
                
                // Success notification
                emailext (
                    subject: "✅ Todo Pipeline Success: Build #${env.BUILD_NUMBER}",
                    body: """
                        🎉 Todo DevOps Pipeline completed successfully!
                        
                        Build: ${env.BUILD_NUMBER}
                        Branch: ${env.BRANCH_NAME ?: 'main'}
                        Duration: ${currentBuild.durationString}
                        
                        ✅ All 7 stages completed successfully:
                        • Checkout ✅
                        • Build ✅  
                        • Test ✅
                        • Code Quality ✅
                        • Security ✅
                        • Deploy ✅
                        • Release ✅
                        • Monitoring ✅
                        
                        🚀 Application URLs:
                        Production: http://localhost:${env.PROD_PORT}
                        Monitoring: http://localhost:3001
                        
                        View build: ${env.BUILD_URL}
                    """,
                    to: "${env.CHANGE_AUTHOR_EMAIL ?: 'admin@company.com'}"
                )
            }
        }
        
        failure {
            script {
                echo '❌ Todo DevOps Pipeline failed'
                
                emailext (
                    subject: "❌ Todo Pipeline Failed: Build #${env.BUILD_NUMBER}",
                    body: """
                        ❌ Todo DevOps Pipeline failed
                        
                        Build: ${env.BUILD_NUMBER}
                        Failed Stage: ${env.STAGE_NAME ?: 'Unknown'}
                        
                        Please check the build logs: ${env.BUILD_URL}console
                    """,
                    to: "${env.CHANGE_AUTHOR_EMAIL ?: 'admin@company.com'}",
                    attachLog: true
                )
            }
        }
        
        unstable {
            echo '⚠️ Todo DevOps Pipeline completed with warnings'
        }
    }
}